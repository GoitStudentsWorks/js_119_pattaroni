{"version":3,"file":"index.js","sources":["../src/js/constants.js","../src/js/api.js","../src/js/refs.js","../src/js/render-function.js","../src/js/handlers.js","../src/main.js"],"sourcesContent":["export const api = {\n  BASE_URL: 'https://sound-wave.b.goit.study/api',\n  ENDPOINTS: {\n    genres: () => '/genres',\n    artists: () => '/artists',\n    artistById: id => `/artists/${id}`,\n    artistByIdWithAlbums: id => `/artists/${id}/albums`,\n    feedbacks: () => '/feedbacks',\n  },\n  PER_PAGE: 8,\n};\n\nexport const SORT_TYPES = {\n  ASC: 'asc',\n  DESC: 'desc',\n};\n","import axios from 'axios';\nimport { api } from './constants';\n\nconst { BASE_URL, ENDPOINTS, PER_PAGE } = api;\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchGenres = async () => {\n  const { data } = await axios.get(ENDPOINTS.genres());\n  return data;\n};\n\n// use SORT_TYPES from constants.js for sortName\nexport const fetchArtists = async ({\n  page = 1,\n  genre,\n  name,\n  sortName,\n} = {}) => {\n  const { data } = await axios.get(ENDPOINTS.artists(), {\n    params: {\n      page,\n      limit: PER_PAGE,\n      ...(!!genre && { genre }),\n      ...(!!name && { name }),\n      ...(!!sortName && { sortName }),\n    },\n  });\n\n  const totalItems = data.totalArtists || 0;\n  const isLastPage = page >= Math.ceil(totalItems / PER_PAGE);\n\n  return { data, isLastPage };\n};\n\nexport const fetchArtistById = async id => {\n  const { data } = await axios.get(ENDPOINTS.artistById(id));\n  return data;\n};\n\nexport const fetchArtistByIdWithAlbums = async id => {\n  const { data } = await axios.get(ENDPOINTS.artistByIdWithAlbums(id));\n  return data;\n};\n\nexport const postFeedback = async feedback => {\n  const { data } = await axios.post(ENDPOINTS.feedbacks(), feedback);\n  return data;\n};\n\nexport const fetchFeedbacks = async (page = 1) => {\n  const { data } = await axios.get(ENDPOINTS.feedbacks(), {\n    params: {\n      page,\n      limit: PER_PAGE,\n    },\n  });\n\n  const totalItems = data.total || 0;\n  const isLastPage = page >= Math.ceil(totalItems / PER_PAGE);\n\n  return { data, isLastPage };\n};\n","export const refs = {\n  artistsList: document.querySelector('.artists-list'),\n};\n","import { refs } from './refs';\n\nexport function renderArtists(data) {\n  const markup = data.map(artist => {\n    const genresMarkup = artist.genres\n      .map(genre => `<li class=\"genres-list-item\">${genre}</li>`)\n      .join('');\n    return `<ul class=\"artists-list\">\n            <li class=\"artists-list-item\">\n                <img src=\"${artist.strArtistThumb}\" alt=\"${artist.strArtist}\" />\n                <ul class=\"genres-list\">\n                    ${genresMarkup}\n                </ul>\n                <h3 class=\"artist-name\">${artist.strArtist}</h3>\n                <p class=\"artist-descr\">${\n                  artist.strBiographyEN.split('.')[0] + '.'\n                }</p>\n                <button type=\"button\" class=\"artist-btn-learn-more\">\n                    <span>Learn More</span>\n                    <span>\n                        <svg class=\"artist-learn-svg\" width=\"24\" height=\"24\">\n                            <use href=\"/img/sprite.svg#next-icon\"></use>\n                        </svg>\n                    </span>\n                </button>\n            </li>\n        </ul>`;\n  });\n  refs.artistsList.insertAdjacentHTML('beforeend', markup);\n}\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { fetchArtists } from './api';\nimport { renderArtists } from './render-function';\n\nexport async function handleArtists() {\n  try {\n    const { data } = await fetchArtists();\n    console.log(data);\n    renderArtists(data.artists);\n  } catch (error) {\n    if (error.response) {\n      iziToast.error({\n        message: `Error ${error.response.status}: ${error.response.data}`,\n      });\n    } else {\n      iziToast.error({ message: `Error: ${error.message}` });\n    }\n  }\n}\n","import { handleArtists } from './js/handlers';\n\ndocument.addEventListener('DOMContentLoaded', handleArtists());\n"],"names":["api","id","BASE_URL","ENDPOINTS","PER_PAGE","axios","fetchArtists","page","genre","name","sortName","data","totalItems","isLastPage","refs","renderArtists","markup","artist","genresMarkup","handleArtists","error","iziToast"],"mappings":"6vBAAO,MAAMA,EAAM,CACjB,SAAU,sCACV,UAAW,CACT,OAAQ,IAAM,UACd,QAAS,IAAM,WACf,WAAYC,GAAM,YAAYA,CAAE,GAChC,qBAAsBA,GAAM,YAAYA,CAAE,UAC1C,UAAW,IAAM,YACrB,EACE,SAAU,CACZ,ECPM,CAAE,SAAAC,EAAU,UAAAC,EAAW,SAAAC,CAAQ,EAAKJ,EAE1CK,EAAM,SAAS,QAAUH,EAQlB,MAAMI,EAAe,MAAO,CACjC,KAAAC,EAAO,EACP,MAAAC,EACA,KAAAC,EACA,SAAAC,CACF,EAAI,KAAO,CACT,KAAM,CAAE,KAAAC,CAAI,EAAK,MAAMN,EAAM,IAAIF,EAAU,UAAW,CACpD,OAAQ,CACN,KAAAI,EACA,MAAOH,EACP,GAAI,CAAC,CAACI,GAAS,CAAE,MAAAA,GACjB,GAAI,CAAC,CAACC,GAAQ,CAAE,KAAAA,GAChB,GAAI,CAAC,CAACC,GAAY,CAAE,SAAAA,EAC1B,CACA,CAAG,EAEKE,EAAaD,EAAK,cAAgB,EAClCE,EAAaN,GAAQ,KAAK,KAAKK,EAAaR,CAAQ,EAE1D,MAAO,CAAE,KAAAO,EAAM,WAAAE,CAAU,CAC3B,ECjCaC,EAAO,CAClB,YAAa,SAAS,cAAc,eAAe,CACrD,ECAO,SAASC,EAAcJ,EAAM,CAClC,MAAMK,EAASL,EAAK,IAAIM,GAAU,CAChC,MAAMC,EAAeD,EAAO,OACzB,IAAIT,GAAS,gCAAgCA,CAAK,OAAO,EACzD,KAAK,EAAE,EACV,MAAO;AAAA;AAAA,4BAEiBS,EAAO,cAAc,UAAUA,EAAO,SAAS;AAAA;AAAA,sBAErDC,CAAY;AAAA;AAAA,0CAEQD,EAAO,SAAS;AAAA,0CAExCA,EAAO,eAAe,MAAM,GAAG,EAAE,CAAC,EAAI,GACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAWE,CAAC,EACDH,EAAK,YAAY,mBAAmB,YAAaE,CAAM,CACzD,CCxBO,eAAeG,GAAgB,CACpC,GAAI,CACF,KAAM,CAAE,KAAAR,GAAS,MAAML,EAAY,EACnC,QAAQ,IAAIK,CAAI,EAChBI,EAAcJ,EAAK,OAAO,CAC5B,OAASS,EAAO,CACVA,EAAM,SACRC,EAAS,MAAM,CACb,QAAS,SAASD,EAAM,SAAS,MAAM,KAAKA,EAAM,SAAS,IAAI,EACvE,CAAO,EAEDC,EAAS,MAAM,CAAE,QAAS,UAAUD,EAAM,OAAO,GAAI,CAEzD,CACF,CCjBA,SAAS,iBAAiB,mBAAoBD,GAAe"}